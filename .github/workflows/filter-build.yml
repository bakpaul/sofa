name: Filter build action


# ===============================================================
# ===============================================================


on:
  # On-demand binary generation
  workflow_dispatch:
    inputs:
      branch:
        description: 'Specify the stable branch to use to generate the new binaries'
        required: true
        type: string
      commit_sha:
        description: 'Commit SHA to check out'
        required: true
        default: 'head'
        type: string
      python_version:
        description: 'Version of Python used'
        required: true
        default: '3.12'
        type: string
      preset:
        description: 'Preset to use from CMakePresets.json file in main repository'
        required: true
        default: 'full'
        type: string
      generate_binaries:
        description: 'Boolean to generate the binaries'
        required: true
        default: true
        type: boolean
      builder_os:
        type: string
        required: true
        default: '["sh-ubuntu_gcc_release"]'

  # Nightly build
  schedule:
    - cron: '0 2 * * *'   # Evevery night
    
  # PR-related build (open, labels, push)
  pull_request:
    types: [opened, synchronize]
    
  # Comment on PR
  issue_comment:
    types: [created, edited]
    
  # CI for dashboard master
  push:
    branches:
      - 'master'

# ===============================================================
# ===============================================================


jobs:
  filter_build:
    runs-on: ubuntu-latest
    outputs:
      SOFA_BRANCH_NAME: ${{ steps.export-vars.outputs.SOFA_BRANCH_NAME }}
      SOFA_COMMIT_SHA: ${{ steps.export-vars.outputs.SOFA_COMMIT_SHA }}
      PRESET: ${{ steps.export-vars.outputs.PRESET }}
      PYTHON_VERSION: ${{ steps.export-vars.outputs.PYTHON_VERSION }}
      CI_DEPENDS_ON: ${{ steps.export-vars.outputs.CI_DEPENDS_ON }}
      WITH_ALL_TESTS: ${{ steps.export-vars.outputs.WITH_ALL_TESTS }}
      FORCE_FULL_BUILD: ${{ steps.export-vars.outputs.FORCE_FULL_BUILD }}
      OUT_OF_TREE_BUILD: ${{ steps.export-vars.outputs.OUT_OF_TREE_BUILD }}
      GENERATE_BINARIES: ${{ steps.export-vars.outputs.GENERATE_BINARIES }}
      PR_OWNER_URL: ${{ steps.export-vars.outputs.PR_OWNER_URL }}
      PR_BRANCH_NAME: ${{ steps.export-vars.outputs.PR_BRANCH_NAME }}
      PR_COMMIT_SHA: ${{ steps.export-vars.outputs.PR_COMMIT_SHA }}
      BUILDER_OS: ${{ steps.export-vars.outputs.BUILDER_OS }}
      
    steps:
      - name: Default values of environment variables
        run: |
          echo "SOFA_BRANCH_NAME=master" >> $GITHUB_ENV    # SOFA_BRANCH_NAME: "master"
          echo "SOFA_COMMIT_SHA=HEAD" >> $GITHUB_ENV       # SOFA_COMMIT_SHA: "HEAD"
          echo "PRESET=full" >> $GITHUB_ENV                # PRESET: "full"
          echo "PYTHON_VERSION=3.12" >> $GITHUB_ENV        # PYTHON_VERSION: "3.12"
          echo "CI_DEPENDS_ON=" >> $GITHUB_ENV             # CI_DEPENDS_ON: ""
          echo "WITH_ALL_TESTS=false" >> $GITHUB_ENV       # WITH_ALL_TESTS: false
          echo "FORCE_FULL_BUILD=false" >> $GITHUB_ENV     # FORCE_FULL_BUILD: false
          echo "OUT_OF_TREE_BUILD=" >> $GITHUB_ENV         # OUT_OF_TREE_BUILD: ""
          echo "GENERATE_BINARIES=false" >> $GITHUB_ENV    # GENERATE_BINARIES: false
          echo "PR_OWNER_URL=" >> $GITHUB_ENV              # PR_OWNER_URL: ""
          echo "PR_BRANCH_NAME=" >> $GITHUB_ENV            # PR_BRANCH_NAME: ""
          echo "PR_COMMIT_SHA=HEAD" >> $GITHUB_ENV         # PR_COMMIT_SHA: "HEAD"
          echo 'BUILDER_OS=["sh-ubuntu_gcc_release"]' >> $GITHUB_ENV            # BUILDER_OS: ["sh-ubuntu_gcc_release"]
          
      - name: Run on dispatch
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          echo "This step runs only for binary generation."

          BRANCH=${{ github.event.inputs.branch }}
          COMMIT=${{ github.event.inputs.commit_sha }}
          PYTHON=${{ github.event.inputs.python_version }}
          PRESET=${{ github.event.inputs.preset }}
          GENERATE_BINARIES=${{ github.event.inputs.generate_binaries }}
          BUILDER_OS=${{ github.event.inputs.builder_os }}

          # Validate branch format (e.g., v25.06)
          if [ [ ! "$BRANCH" =~ ^v[0-9]{2}\.[0-9]{2}$ ] && [ "$BRANCH" != "master" ] ]; then
            echo "Error: Invalid branch name format: $BRANCH."
            echo "Branch name should be either master or any release branch (e.g., v25.06)"
            exit 1
          fi
          echo "Branch name $BRANCH is valid."

          # Check commit SHA format
          if [[ ! "$COMMIT" =~ ^[a-fA-F0-9]{40}$ ]]; then
            echo "Error: Invalid commit SHA format: $COMMIT"
            exit 1
          fi
          # Check the commit exists in the repository
          if git cat-file -e "$COMMIT" 2>/dev/null; then
            echo "Commit $COMMIT is valid."
          else
            echo "Commit $COMMIT does not exist in the repository."
            exit 1
          fi
          
          # Validate Python version format (e.g., 3.12)
          if [[ ! "PYTHON" =~ ^[0-9]{1}\.[0-9]{2}$ ]]; then
            if [[ ! "PYTHON" =~ ^3\.(9|1[0-8])$ ]]; then
              echo "Error: Invalid Python version format: PYTHON"
              exit 1
            fi
          fi
          echo "Python version $PYTHON is valid."
          
          # Check if the preset is valid
          ALLOWED_PRESETS=("minimal" "standard" "full" "minimal-dev" "standard-dev" "full-dev")
          if [[ ! " ${ALLOWED_PRESETS[@]} " =~ " ${PRESET} " ]]; then
            echo "Error: Invalid preset $PRESET. Must be one of: ${ALLOWED_PRESETS[*]}"
            exit 1
          fi
          echo "Preset $PRESET is valid."
          
          # Validate generate_binaries (must be true or false)
          if [[ "$GENERATE_BINARIES" != "true" && "$GENERATE_BINARIES" != "false" ]]; then
            echo "Error: 'generate_binaries' must be either 'true' or 'false'."
            exit 1
          fi

          # Validate builder_os (must be a list)
          python3 -c "import ast; x=ast.literal_eval('$BUILDER_OS'); assert isinstance(x, list)" 2>/dev/null
          if [[ $? -ne 0 ]]; then
            echo "Error: 'builder_os' must be a list."
            return 1
          fi
          
          # Save all information in environment variables
          echo "SOFA_BRANCH_NAME=$BRANCH" >> $GITHUB_ENV
          echo "SOFA_COMMIT_SHA=$COMMIT" >> $GITHUB_ENV
          echo "PRESET=$PRESET" >> $GITHUB_ENV
          echo "PYTHON_VERSION=$PYTHON" >> $GITHUB_ENV
          echo "GENERATE_BINARIES=$GENERATE_BINARIES" >> $GITHUB_ENV
          echo "BUILDER_OS=$BUILDER_OS" >> $GITHUB_ENV

      - name: Set up python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install pip packages
        run: |
          pip install python-graphql-client
          pip install requests

      - name: Check out code
        uses: actions/checkout@v2

      - name: Check push on master case (e.g. merge)
        if: ${{ github.event_name == 'push'}}
        run: |
          echo "This step runs only for push on the master branch."
          echo "SOFA_COMMIT_SHA=${{ github.sha }}">> $GITHUB_ENV
          echo "WITH_ALL_TESTS=true" >> $GITHUB_ENV
          echo "FORCE_FULL_BUILD=true" >> $GITHUB_ENV
          echo 'BUILDER_OS=["sh-ubuntu_gcc_release","sh-ubuntu_clang_release","sh-ubuntu_clang_debug","sh-fedora_clang_release","sh-windows_vs2022_release","sh-macos_clang_release"]' >> $GITHUB_ENV

      - name: Run when PR is opened or a commit is pushed in a PR
        if: ${{ github.event_name == 'pull_request' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          OWNER_NAME: ${{ github.event.pull_request.head.repo.owner.login }}
          PR_COMMIT_SHA: ${{ github.event.pull_request.head.sha }}
        run: |
          echo "This step runs only when a PR is opened or synchronized."
          
          # Trigger the Build action
          python scripts/github_CI/checkPRInfoBeforeBuild.py
      
      - name: Run when PR comment is created or edited
        if: ${{ github.event_name == 'issue_comment' && github.event.issue.pull_request }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.issue.number }}
        run: |
          echo "This step runs only when a PR comment is created or edited."
          COMMENT_BODY=$(jq -r '.comment.body' < $GITHUB_EVENT_PATH)
          echo "Comment: $COMMENT_BODY"

          # Trigger the Build action if [ci-build] is in the comment 
          if [[ "$COMMENT_BODY" == *"[ci-build]"* ]]; then
            echo "Fetching PR #$PR_NUMBER information"

            pr_data=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/repos/bakpaul/sofa/pulls/$PR_NUMBER")

            # Extract data
            pr_owner=$(echo "$pr_data" | jq -r '.user.login')
            pr_sha=$(echo "$pr_data" | jq -r '.head.sha')

            echo "- PR number         : $PR_NUMBER"
            echo "- PR owner name     : $pr_owner"
            echo "- PR commit SHA     : $pr_sha"

            # Save to environment variables for future steps
            echo "OWNER_NAME=$pr_owner" >> $GITHUB_ENV
            echo "PR_COMMIT_SHA=$pr_sha" >> $GITHUB_ENV

            echo "Env: OWNER_NAME = $OWNER_NAME"

            python scripts/github_CI/checkPRInfoBeforeBuild.py
          fi

      - name: Export environment variables as outputs
        id: export-vars
        run: |
          # Validate branch format (e.g., v25.06)
          if [ [ ! "$SOFA_BRANCH_NAME" =~ ^v[0-9]{2}\.[0-9]{2}$ ] && [ "$SOFA_BRANCH_NAME" != "master" ] ]; then
            echo "Error: Invalid branch name format: $SOFA_BRANCH_NAME."
            echo "Branch name should be either master or any release branch (e.g., v25.06)"
            exit 1
          fi
          
          echo "SOFA_BRANCH_NAME=${SOFA_BRANCH_NAME}" >> $GITHUB_OUTPUT
          echo "SOFA_COMMIT_SHA=${SOFA_COMMIT_SHA}" >> $GITHUB_OUTPUT
          echo "PRESET=${PRESET}" >> $GITHUB_OUTPUT
          echo "PYTHON_VERSION=${PYTHON_VERSION}" >> $GITHUB_OUTPUT
          echo "CI_DEPENDS_ON=${CI_DEPENDS_ON}" >> $GITHUB_OUTPUT
          echo "WITH_ALL_TESTS=${WITH_ALL_TESTS}" >> $GITHUB_OUTPUT
          echo "FORCE_FULL_BUILD=${FORCE_FULL_BUILD}" >> $GITHUB_OUTPUT
          echo "OUT_OF_TREE_BUILD=${OUT_OF_TREE_BUILD}" >> $GITHUB_OUTPUT
          echo "GENERATE_BINARIES=${GENERATE_BINARIES}" >> $GITHUB_OUTPUT
          echo "PR_OWNER_URL=${PR_OWNER_URL}" >> $GITHUB_OUTPUT
          echo "PR_BRANCH_NAME=${PR_BRANCH_NAME}" >> $GITHUB_OUTPUT
          echo "PR_COMMIT_SHA=${PR_COMMIT_SHA}" >> $GITHUB_OUTPUT
          echo "BUILDER_OS=${BUILDER_OS}" >> $GITHUB_OUTPUT



          
  nightly_build:
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 2 * * *'
    strategy:
      matrix:
        sofa_version: [master, v24.12]
    ### if: ${{ github.repository_owner == 'sofa-framework' }}
    outputs:
      SOFA_BRANCH_NAME: ${{ steps.export-vars.outputs.SOFA_BRANCH_NAME }}
      SOFA_COMMIT_SHA: ${{ steps.export-vars.outputs.SOFA_COMMIT_SHA }}
      PRESET: ${{ steps.export-vars.outputs.PRESET }}
      PYTHON_VERSION: ${{ steps.export-vars.outputs.PYTHON_VERSION }}
      CI_DEPENDS_ON: ${{ steps.export-vars.outputs.CI_DEPENDS_ON }}
      WITH_ALL_TESTS: ${{ steps.export-vars.outputs.WITH_ALL_TESTS }}
      FORCE_FULL_BUILD: ${{ steps.export-vars.outputs.FORCE_FULL_BUILD }}
      OUT_OF_TREE_BUILD: ${{ steps.export-vars.outputs.OUT_OF_TREE_BUILD }}
      GENERATE_BINARIES: ${{ steps.export-vars.outputs.GENERATE_BINARIES }}
      PR_OWNER_URL: ${{ steps.export-vars.outputs.PR_OWNER_URL }}
      PR_BRANCH_NAME: ${{ steps.export-vars.outputs.PR_BRANCH_NAME }}
      PR_COMMIT_SHA: ${{ steps.export-vars.outputs.PR_COMMIT_SHA }}
      BUILDER_OS: ${{ steps.export-vars.outputs.BUILDER_OS }}
      
    steps:
      - name: Default values of environment variables
        run: |
          echo "SOFA_BRANCH_NAME=master" >> $GITHUB_ENV    # SOFA_BRANCH_NAME: "master"
          echo "SOFA_COMMIT_SHA=HEAD" >> $GITHUB_ENV       # SOFA_COMMIT_SHA: "HEAD"
          echo "PRESET=full" >> $GITHUB_ENV                # PRESET: "full"
          echo "PYTHON_VERSION=3.12" >> $GITHUB_ENV        # PYTHON_VERSION: "3.12"
          echo "CI_DEPENDS_ON=" >> $GITHUB_ENV             # CI_DEPENDS_ON: ""
          echo "WITH_ALL_TESTS=false" >> $GITHUB_ENV       # WITH_ALL_TESTS: false
          echo "FORCE_FULL_BUILD=false" >> $GITHUB_ENV     # FORCE_FULL_BUILD: false
          echo "OUT_OF_TREE_BUILD=" >> $GITHUB_ENV         # OUT_OF_TREE_BUILD: ""
          echo "GENERATE_BINARIES=false" >> $GITHUB_ENV    # GENERATE_BINARIES: false
          echo "PR_OWNER_URL=" >> $GITHUB_ENV              # PR_OWNER_URL: ""
          echo "PR_BRANCH_NAME=" >> $GITHUB_ENV            # PR_BRANCH_NAME: ""
          echo "PR_COMMIT_SHA=HEAD" >> $GITHUB_ENV         # PR_COMMIT_SHA: "HEAD"
          echo 'BUILDER_OS=["sh-ubuntu_gcc_release"]' >> $GITHUB_ENV            # BUILDER_OS: ["sh-ubuntu_gcc_release"]
          
      - name: Set up python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install pip packages
        run: |
          pip install python-graphql-client
          pip install requests

      - name: Check out code
        uses: actions/checkout@v2

      - name: Run when nightly
        run: |
          echo "This step runs only for nightly builds."
          echo "SOFA_BRANCH_NAME=${{ matrix.sofa_version }}" >> $GITHUB_ENV
          echo "PRESET=standard" >> $GITHUB_ENV
          echo "WITH_ALL_TESTS=true" >> $GITHUB_ENV
          echo "GENERATE_BINARIES=true" >> $GITHUB_ENV
          echo 'BUILDER_OS=["sh-ubuntu_gcc_release","sh-windows_vs2022_release","sh-macos_clang_release"]' >> $GITHUB_ENV

      - name: Export environment variables as outputs
        id: export-vars
        run: |
          echo "SOFA_BRANCH_NAME=${SOFA_BRANCH_NAME}" >> $GITHUB_OUTPUT
          echo "SOFA_COMMIT_SHA=${SOFA_COMMIT_SHA}" >> $GITHUB_OUTPUT
          echo "PRESET=${PRESET}" >> $GITHUB_OUTPUT
          echo "PYTHON_VERSION=${PYTHON_VERSION}" >> $GITHUB_OUTPUT
          echo "CI_DEPENDS_ON=${CI_DEPENDS_ON}" >> $GITHUB_OUTPUT
          echo "WITH_ALL_TESTS=${WITH_ALL_TESTS}" >> $GITHUB_OUTPUT
          echo "FORCE_FULL_BUILD=${FORCE_FULL_BUILD}" >> $GITHUB_OUTPUT
          echo "OUT_OF_TREE_BUILD=${OUT_OF_TREE_BUILD}" >> $GITHUB_OUTPUT
          echo "GENERATE_BINARIES=${GENERATE_BINARIES}" >> $GITHUB_OUTPUT
          echo "PR_OWNER_URL=${PR_OWNER_URL}" >> $GITHUB_OUTPUT
          echo "PR_BRANCH_NAME=${PR_BRANCH_NAME}" >> $GITHUB_OUTPUT
          echo "PR_COMMIT_SHA=${PR_COMMIT_SHA}" >> $GITHUB_OUTPUT
          echo "BUILDER_OS=${BUILDER_OS}" >> $GITHUB_OUTPUT




  # ===============================================================
  # ===============================================================

  # Trigger the build with all parameters
  call-workflow-passing-data:
    needs: filter_build
    uses: bakpaul/sofa/.github/workflows/build-and-test.yml@add_docker_in_ci
    with:
      sofa-branch-name: ${{ needs.filter_build.outputs.SOFA_BRANCH_NAME }}
      sofa-commit-sha: ${{ needs.filter_build.outputs.SOFA_COMMIT_SHA }}
      preset: ${{ needs.filter_build.outputs.PRESET }}
      python-version: ${{ needs.filter_build.outputs.PYTHON_VERSION }}
      ci-depends-on: ${{ needs.filter_build.outputs.CI_DEPENDS_ON }}
      with-all-tests: ${{ needs.filter_build.outputs.WITH_ALL_TESTS == 'true'}}
      force-full-build: ${{ needs.filter_build.outputs.FORCE_FULL_BUILD == 'true'}}
      out-of-tree-build: ${{ needs.filter_build.outputs.OUT_OF_TREE_BUILD }}
      generate-binaries: ${{ needs.filter_build.outputs.GENERATE_BINARIES == 'true'}}
      pr-owner-url: ${{ needs.filter_build.outputs.PR_OWNER_URL }}
      pr-branch-name: ${{ needs.filter_build.outputs.PR_BRANCH_NAME }}
      pr-commit-sha: ${{ needs.filter_build.outputs.PR_COMMIT_SHA }}
      builder-os: ${{ needs.filter_build.outputs.BUILDER_OS }}
