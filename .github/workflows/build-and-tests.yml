name: Compile SOFA and run Tests
on:
  workflow_call:
    inputs:
      sofa-branch-name:
        type: string
        required: true
      sofa-commit-sha:
        type: string
        required: true
      pr-owner-url:
        type: string
        required: false
      pr-branch-name:
        type: string
        required: false
      pr-commit-sha:
        type: string
        required: false
      preset:
        type: string
        required: true
      python-version:
        type: string
        required: true
      ci-depends-on:
        type: string
        required: false
      with-all-tests:
        type: boolean
        required: false
        default: false
      force-full-build:
        type: boolean
        required: false
        default: false
      generate-binaries:
        type: boolean
        required: false
        default: false
      out-of-tree-build:
        type: string
        required: false

jobs:
  build:
    runs-on: [sh-ubuntu]
    steps:
      - name: Clone SOFA and CI
        shell: bash
        run: |
          ## Go to workspace given by the runner (this file is generated by the pre-build script)
          WORKSPACE=$(cat $GITHUB_WORKFLOW_SHA) 
          cd $WORKSPACE

          ## Clone sofa and merge origin master
          echo "Cloning SOFA at commit $GITHUB_WORKFLOW_SHA"
          if [ -d  $WORKSPACE/sofa ]; then
            rm -rf $WORKSPACE/sofa 
          if

          SRC_DIR=$(pwd)/sofa

          if [ -z "${{ inputs.pr-owner-url }}" ]; then
              echo "This is a PR, merging branch ${{ inputs.pr-branch-name }} from remote ${{ inputs.pr-owner-url }} into origin branch ${{ inputs.sofa-branch-name }}"
              git clone -b ${{ inputs.sofa-branch-name }} --single-branch https://www.github.com/sofa-framework/sofa
              git remote add pr ${{ inputs.pr-owner-url }}
              git fetch pr 
              
              if [ "${{ inputs.pr-commit-sha }}" == "HEAD" ]; then
                  git merge ${{ inputs.pr-branch-name }}
              else
                  git merge ${{ inputs.pr-commit-sha }}
              fi
          else
              echo "This is not a PR: checking out sha ${{ inputs.sofa-commit-sha }} from branch ${{ inputs.sofa-branch-name }}"
              git clone -b ${{ inputs.sofa-branch-name }} --single-branch https://www.github.com/sofa-framework/sofa
              git checkout ${{ inputs.sofa-commit-sha }}
          fi

          
          cd $WORKSPACE
          echo "Cloning CI"
          #TODO : clone ci branch with same name as the sofa branch against which the PR is compared OR the branch from which the commit comes
          
          if [ -d  $WORKSPACE/ci ]; then
            rm -rf $WORKSPACE/ci
          fi
          mkdir $WORKSPACE/ci && cd $WORKSPACE/ci 
          CI_DIR=$(pwd)

          git init
          git remote add origin https://www.github.com/sofa-framework/ci.git
          git fetch origin master
          git checkout FETCH_HEAD

          cd $WORKSPACE

          #TODO: transform infos to force-full-build
          if [ -d  $WORKSPACE/build ]; then
            rm -rf $WORKSPACE/build
          fi
          mkdir $WORKSPACE/build

      - name: Notify dashboard
        shell: bash
        run: |
          #TODO

      - name: Build
        continue-on-error: true
        shell: bash
        run: |
          #TODO
          #HEre we use docker if possible

      - name: Notify dashboard
        shell: bash
        run: |
          #TODO

      - name: Launch tests
        continue-on-error: true
        if: steps.Build.outcome == 'success'
        shell: bash
        run: |
          #TODO
          #Use new action with workflow call

      - name: Publish artifacts
        if: steps.Build.outcome == 'success' && inputs.generate-binaries == true
        shell: bash
        run: |
          #TODO
          #Use new action with workflow call
      
      - name: Publish logs
        if: always()
        shell: bash
        run: |
          #TODO
          #Use new action with workflow call